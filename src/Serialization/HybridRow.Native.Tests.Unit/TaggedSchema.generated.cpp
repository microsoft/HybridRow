// ------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

#include "pch.h"
#include "TaggedSchema.generated.h"

// ------------------------------------------------------------
// This file was generated by:
//   Microsoft.Azure.Cosmos.Serialization.HybridRowCLI: 1.0.0.0
//
// This file should not be modified directly.
// ------------------------------------------------------------

// ReSharper disable CppClangTidyCppcoreguidelinesProTypeStaticCastDowncast
// ReSharper disable CppClangTidyPerformanceMoveConstArg
// ReSharper disable CppRedundantControlFlowJump
// ReSharper disable CppClangTidyClangDiagnosticExitTimeDestructors
namespace cdb_hr_test::typed_array
{
  using namespace std::literals;

  class TypedArrayHrSchema::Literal final
  {
    friend struct TypedArrayHrSchema;


    static const cdb_hr::Namespace& GetNamespace() noexcept
    {
      return *s_namespace;
    }

    static std::unique_ptr<cdb_hr::LayoutResolver> LoadSchema()
    {
      auto ns = cdb_core::make_unique_with([&](cdb_hr::Namespace& n)
      {
        n.SetName("Microsoft.Azure.Cosmos.Serialization.HybridRow.Tests.Unit.TypedArray");
        n.SetVersion(cdb_hr::SchemaLanguageVersion::V2);
        n.SetCppNamespace("cdb_hr_test::typed_array");
        //////////////////////////////////////////////////////////////////////////////
        n.GetSchemas().emplace_back(cdb_core::make_unique_with([](cdb_hr::Schema& s)
        {
          s.SetName("Tagged");
          s.SetSchemaId(cdb_hr::SchemaId{1});
          s.GetProperties().emplace_back(cdb_core::make_unique_with([](cdb_hr::Property& p)
          {
            p.SetPath("title");
            p.SetPropertyType(cdb_core::make_unique_with([](cdb_hr::PrimitivePropertyType& pt)
            {
              pt.SetType(cdb_hr::TypeKind::Utf8);
              pt.SetStorage(cdb_hr::StorageKind::Variable);
            }));
          }));
          s.GetProperties().emplace_back(cdb_core::make_unique_with([](cdb_hr::Property& p)
          {
            p.SetPath("tags");
            p.SetPropertyType(
              std::make_unique<cdb_hr::ArrayPropertyType>(cdb_core::make_unique_with([](cdb_hr::PrimitivePropertyType& pt)
              {
                pt.SetType(cdb_hr::TypeKind::Utf8);
                pt.SetNullable(false);
              })));
          }));
          s.GetProperties().emplace_back(cdb_core::make_unique_with([](cdb_hr::Property& p)
          {
            p.SetPath("options");
            p.SetPropertyType(
              std::make_unique<cdb_hr::ArrayPropertyType>(cdb_core::make_unique_with([](cdb_hr::PrimitivePropertyType& pt)
              {
                pt.SetType(cdb_hr::TypeKind::Int32);
              })));
          }));
          s.GetProperties().emplace_back(cdb_core::make_unique_with([](cdb_hr::Property& p)
          {
            p.SetPath("ratings");
            p.SetPropertyType(
              std::make_unique<cdb_hr::ArrayPropertyType>(
                std::make_unique<cdb_hr::ArrayPropertyType>(cdb_core::make_unique_with([](cdb_hr::PrimitivePropertyType& pt)
                {
                  pt.SetType(cdb_hr::TypeKind::Float64);
                  pt.SetNullable(false);
                }), false)));
          }));
          s.GetProperties().emplace_back(cdb_core::make_unique_with([](cdb_hr::Property& p)
          {
            p.SetPath("similars");
            p.SetPropertyType(
              std::make_unique<cdb_hr::ArrayPropertyType>(
                std::make_unique<cdb_hr::UdtPropertyType>("SimilarMatch", cdb_hr::SchemaId{0}, false)));
          }));
          s.GetProperties().emplace_back(cdb_core::make_unique_with([](cdb_hr::Property& p)
          {
            p.SetPath("priority");
            p.SetPropertyType(
              std::make_unique<cdb_hr::ArrayPropertyType>(
                std::make_unique<cdb_hr::TuplePropertyType>(
                  cdb_hr::IHybridRowSerializer::make_unique_vector<cdb_hr::PropertyType>(
                    cdb_core::make_unique_with([](cdb_hr::PrimitivePropertyType& pt)
                    {
                      pt.SetType(cdb_hr::TypeKind::Utf8);
                      pt.SetNullable(false);
                    }),
                    cdb_core::make_unique_with([](cdb_hr::PrimitivePropertyType& pt)
                    {
                      pt.SetType(cdb_hr::TypeKind::Int64);
                      pt.SetNullable(false);
                    })
                  ), false)));
          }));
        }));
        //////////////////////////////////////////////////////////////////////////////
        n.GetSchemas().emplace_back(cdb_core::make_unique_with([](cdb_hr::Schema& s)
        {
          s.SetName("SimilarMatch");
          s.SetSchemaId(cdb_hr::SchemaId{2});
          s.GetProperties().emplace_back(cdb_core::make_unique_with([](cdb_hr::Property& p)
          {
            p.SetPath("thumbprint");
            p.SetPropertyType(cdb_core::make_unique_with([](cdb_hr::PrimitivePropertyType& pt)
            {
              pt.SetType(cdb_hr::TypeKind::Utf8);
              pt.SetLength(18);
              pt.SetStorage(cdb_hr::StorageKind::Fixed);
            }));
          }));
          s.GetProperties().emplace_back(cdb_core::make_unique_with([](cdb_hr::Property& p)
          {
            p.SetPath("score");
            p.SetPropertyType(cdb_core::make_unique_with([](cdb_hr::PrimitivePropertyType& pt)
            {
              pt.SetType(cdb_hr::TypeKind::Float64);
              pt.SetStorage(cdb_hr::StorageKind::Fixed);
            }));
          }));
        }));
      });

      s_namespace = ns.get();
      return std::make_unique<cdb_hr::LayoutResolverNamespace>(std::move(ns));
    }

    inline static cdb_hr::Namespace* s_namespace{nullptr};
    inline static std::unique_ptr<cdb_hr::LayoutResolver> s_layoutResolver{LoadSchema()};
  };

  const cdb_hr::Namespace& TypedArrayHrSchema::GetNamespace() noexcept
  {
    return *Literal::s_namespace;
  }

  const cdb_hr::LayoutResolver& TypedArrayHrSchema::GetLayoutResolver() noexcept
  {
    return *Literal::s_layoutResolver;
  }

  class TaggedHybridRowSerializer::Literal final
  {
    friend struct TaggedHybridRowSerializer;

    constexpr static std::string_view TitleName{"title"sv};
    constexpr static std::string_view TagsName{"tags"sv};
    constexpr static std::string_view OptionsName{"options"sv};
    constexpr static std::string_view RatingsName{"ratings"sv};
    constexpr static std::string_view SimilarsName{"similars"sv};
    constexpr static std::string_view PriorityName{"priority"sv};

    inline static const cdb_hr::Layout& Layout{TypedArrayHrSchema::GetLayoutResolver().Resolve(Id)};

    inline static const cdb_hr::LayoutColumn& TitleColumn{cdb_hr::IHybridRowSerializer::InitLayoutColumn(Layout, TitleName)};
    inline static const cdb_hr::LayoutColumn& TagsColumn{cdb_hr::IHybridRowSerializer::InitLayoutColumn(Layout, TagsName)};
    inline static const cdb_hr::LayoutColumn& OptionsColumn{cdb_hr::IHybridRowSerializer::InitLayoutColumn(Layout, OptionsName)};
    inline static const cdb_hr::LayoutColumn& RatingsColumn{cdb_hr::IHybridRowSerializer::InitLayoutColumn(Layout, RatingsName)};
    inline static const cdb_hr::LayoutColumn& SimilarsColumn{cdb_hr::IHybridRowSerializer::InitLayoutColumn(Layout, SimilarsName)};
    inline static const cdb_hr::LayoutColumn& PriorityColumn{cdb_hr::IHybridRowSerializer::InitLayoutColumn(Layout, PriorityName)};

    inline static const cdb_hr::StringTokenizer::StringToken& TagsToken{
      cdb_hr::IHybridRowSerializer::InitStringToken(Layout, TagsColumn.GetPath())
    };
    inline static const cdb_hr::StringTokenizer::StringToken& OptionsToken{
      cdb_hr::IHybridRowSerializer::InitStringToken(Layout, OptionsColumn.GetPath())
    };
    inline static const cdb_hr::StringTokenizer::StringToken& RatingsToken{
      cdb_hr::IHybridRowSerializer::InitStringToken(Layout, RatingsColumn.GetPath())
    };
    inline static const cdb_hr::StringTokenizer::StringToken& SimilarsToken{
      cdb_hr::IHybridRowSerializer::InitStringToken(Layout, SimilarsColumn.GetPath())
    };
    inline static const cdb_hr::StringTokenizer::StringToken& PriorityToken{
      cdb_hr::IHybridRowSerializer::InitStringToken(Layout, PriorityColumn.GetPath())
    };

    static cdb_hr::Result Write(cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, const Tagged& value) noexcept;
    static cdb_hr::Result Read(const cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, Tagged& value);
  };

  cdb_hr::Result TaggedHybridRowSerializer::Write(cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, bool isRoot, 
                   const cdb_hr::TypeArgumentList& typeArgs, const Tagged& value) noexcept
  {
    if (isRoot)
    {
      return TaggedHybridRowSerializer::Literal::Write(row, scope, value);
    }

    auto [r, childScope] = cdb_hr::LayoutLiteral::UDT.WriteScope(row, scope, Id);
    if (r != cdb_hr::Result::Success)
    {
      return r;
    }

    r = TaggedHybridRowSerializer::Literal::Write(row, childScope, value);
    if (r != cdb_hr::Result::Success)
    {
      return r;
    }

    scope.Skip(row, childScope);
    return cdb_hr::Result::Success;
  }

  cdb_hr::Result TaggedHybridRowSerializer::Literal::Write(cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, const Tagged& value) noexcept
  {
    if (!cdb_hr::IHybridRowSerializer::is_default(value.GetTitle()))
    {
      cdb_hr::Result r = cdb_hr::LayoutLiteral::Utf8.WriteVariable(
        row, scope, TitleColumn, cdb_hr::IHybridRowSerializer::get(value.GetTitle()));
      if (r != cdb_hr::Result::Success)
      {
        return r;
      }
    }

    if (!cdb_hr::IHybridRowSerializer::is_default(value.GetTags()))
    {
      scope.Find(row, TagsColumn.GetPath());
      cdb_hr::Result r = cdb_hr::TypedArrayHybridRowSerializer<std::string, cdb_hr::Utf8HybridRowSerializer>::Write(
        row,
        scope,
        false,
        TagsColumn.GetTypeArgs(),
        cdb_hr::IHybridRowSerializer::get(value.GetTags()));
      if (r != cdb_hr::Result::Success)
      {
        return r;
      }
    }

    if (!cdb_hr::IHybridRowSerializer::is_default(value.GetOptions()))
    {
      scope.Find(row, OptionsColumn.GetPath());
      cdb_hr::Result r = cdb_hr::TypedArrayHybridRowSerializer<std::optional<int32_t>, cdb_hr::NullableHybridRowSerializer<std::optional<int32_t>, int32_t, cdb_hr::Int32HybridRowSerializer>>::Write(
        row,
        scope,
        false,
        OptionsColumn.GetTypeArgs(),
        cdb_hr::IHybridRowSerializer::get(value.GetOptions()));
      if (r != cdb_hr::Result::Success)
      {
        return r;
      }
    }

    if (!cdb_hr::IHybridRowSerializer::is_default(value.GetRatings()))
    {
      scope.Find(row, RatingsColumn.GetPath());
      cdb_hr::Result r = cdb_hr::TypedArrayHybridRowSerializer<std::vector<float64_t>, cdb_hr::TypedArrayHybridRowSerializer<float64_t, cdb_hr::Float64HybridRowSerializer>>::Write(
        row,
        scope,
        false,
        RatingsColumn.GetTypeArgs(),
        cdb_hr::IHybridRowSerializer::get(value.GetRatings()));
      if (r != cdb_hr::Result::Success)
      {
        return r;
      }
    }

    if (!cdb_hr::IHybridRowSerializer::is_default(value.GetSimilars()))
    {
      scope.Find(row, SimilarsColumn.GetPath());
      cdb_hr::Result r = cdb_hr::TypedArrayHybridRowSerializer<SimilarMatch, SimilarMatchHybridRowSerializer>::Write(
        row,
        scope,
        false,
        SimilarsColumn.GetTypeArgs(),
        cdb_hr::IHybridRowSerializer::get(value.GetSimilars()));
      if (r != cdb_hr::Result::Success)
      {
        return r;
      }
    }

    if (!cdb_hr::IHybridRowSerializer::is_default(value.GetPriority()))
    {
      scope.Find(row, PriorityColumn.GetPath());
      cdb_hr::Result r = cdb_hr::TypedArrayHybridRowSerializer<std::tuple<std::string, int64_t>, cdb_hr::TypedTupleHybridRowSerializer<cdb_hr::Utf8HybridRowSerializer, cdb_hr::Int64HybridRowSerializer>>::Write(
        row,
        scope,
        false,
        PriorityColumn.GetTypeArgs(),
        cdb_hr::IHybridRowSerializer::get(value.GetPriority()));
      if (r != cdb_hr::Result::Success)
      {
        return r;
      }
    }

    return cdb_hr::Result::Success;
  }

  std::tuple<cdb_hr::Result, std::unique_ptr<Tagged>> TaggedHybridRowSerializer::Read(const cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, bool isRoot)
  {
    if (isRoot)
    {
      std::unique_ptr<Tagged> value = std::make_unique<Tagged>();
      cdb_hr::Result r = TaggedHybridRowSerializer::Literal::Read(row, scope, *value);
      return {r, std::move(value)};
    }

    auto [r, childScope] = cdb_hr::LayoutLiteral::UDT.ReadScope(row, scope);
    if (r != cdb_hr::Result::Success)
    {
      return {r, std::unique_ptr<Tagged>{}};
    }

    std::unique_ptr<Tagged> value = std::make_unique<Tagged>();
    r = TaggedHybridRowSerializer::Literal::Read(row, childScope, *value);
    if (r != cdb_hr::Result::Success)
    {
      return {r, std::unique_ptr<Tagged>{}};
    }

    scope.Skip(row, childScope);
    return {cdb_hr::Result::Success, std::move(value)};
  }

  cdb_hr::Result TaggedHybridRowSerializer::Literal::Read(const cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, Tagged& value)
  {
    {
      auto [r, fieldValue] = cdb_hr::LayoutLiteral::Utf8.ReadVariable(row, scope, TitleColumn);
      switch (r)
      {
      case cdb_hr::Result::NotFound:
        break;
      case cdb_hr::Result::Success:
        value.SetTitle(std::string(fieldValue));
        break;
      default:
        return r;
      }
    }

    while (scope.MoveNext(row))
    {
      if (scope.GetToken() == TagsToken.GetId())
      {
        auto [r, fieldValue] = cdb_hr::TypedArrayHybridRowSerializer<std::string, cdb_hr::Utf8HybridRowSerializer>::Read(
          row, scope, false);
        if (r != cdb_hr::Result::Success)
        {
          return r;
        }

        value.SetTags(std::move(fieldValue));
        continue;
      }

      if (scope.GetToken() == OptionsToken.GetId())
      {
        auto [r, fieldValue] = cdb_hr::TypedArrayHybridRowSerializer<std::optional<int32_t>, cdb_hr::NullableHybridRowSerializer<std::optional<int32_t>, int32_t, cdb_hr::Int32HybridRowSerializer>>::Read(
          row, scope, false);
        if (r != cdb_hr::Result::Success)
        {
          return r;
        }

        value.SetOptions(std::move(fieldValue));
        continue;
      }

      if (scope.GetToken() == RatingsToken.GetId())
      {
        auto [r, fieldValue] = cdb_hr::TypedArrayHybridRowSerializer<std::vector<float64_t>, cdb_hr::TypedArrayHybridRowSerializer<float64_t, cdb_hr::Float64HybridRowSerializer>>::Read(
          row, scope, false);
        if (r != cdb_hr::Result::Success)
        {
          return r;
        }

        value.SetRatings(std::move(fieldValue));
        continue;
      }

      if (scope.GetToken() == SimilarsToken.GetId())
      {
        auto [r, fieldValue] = cdb_hr::TypedArrayHybridRowSerializer<SimilarMatch, SimilarMatchHybridRowSerializer>::Read(
          row, scope, false);
        if (r != cdb_hr::Result::Success)
        {
          return r;
        }

        value.SetSimilars(std::move(fieldValue));
        continue;
      }

      if (scope.GetToken() == PriorityToken.GetId())
      {
        auto [r, fieldValue] = cdb_hr::TypedArrayHybridRowSerializer<std::tuple<std::string, int64_t>, cdb_hr::TypedTupleHybridRowSerializer<cdb_hr::Utf8HybridRowSerializer, cdb_hr::Int64HybridRowSerializer>>::Read(
          row, scope, false);
        if (r != cdb_hr::Result::Success)
        {
          return r;
        }

        value.SetPriority(std::move(fieldValue));
        continue;
      }
    }

    return cdb_hr::Result::Success;
  }

  class SimilarMatchHybridRowSerializer::Literal final
  {
    friend struct SimilarMatchHybridRowSerializer;

    constexpr static std::string_view ThumbprintName{"thumbprint"sv};
    constexpr static std::string_view ScoreName{"score"sv};

    inline static const cdb_hr::Layout& Layout{TypedArrayHrSchema::GetLayoutResolver().Resolve(Id)};

    inline static const cdb_hr::LayoutColumn& ThumbprintColumn{cdb_hr::IHybridRowSerializer::InitLayoutColumn(Layout, ThumbprintName)};
    inline static const cdb_hr::LayoutColumn& ScoreColumn{cdb_hr::IHybridRowSerializer::InitLayoutColumn(Layout, ScoreName)};

    static cdb_hr::Result Write(cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, const SimilarMatch& value) noexcept;
    static cdb_hr::Result Read(const cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, SimilarMatch& value);
  };

  cdb_hr::Result SimilarMatchHybridRowSerializer::Write(cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, bool isRoot, 
                   const cdb_hr::TypeArgumentList& typeArgs, const SimilarMatch& value) noexcept
  {
    if (isRoot)
    {
      return SimilarMatchHybridRowSerializer::Literal::Write(row, scope, value);
    }

    auto [r, childScope] = cdb_hr::LayoutLiteral::UDT.WriteScope(row, scope, Id);
    if (r != cdb_hr::Result::Success)
    {
      return r;
    }

    r = SimilarMatchHybridRowSerializer::Literal::Write(row, childScope, value);
    if (r != cdb_hr::Result::Success)
    {
      return r;
    }

    scope.Skip(row, childScope);
    return cdb_hr::Result::Success;
  }

  cdb_hr::Result SimilarMatchHybridRowSerializer::Literal::Write(cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, const SimilarMatch& value) noexcept
  {
    if (!cdb_hr::IHybridRowSerializer::is_default(value.GetThumbprint()))
    {
      cdb_hr::Result r = cdb_hr::LayoutLiteral::Utf8.WriteFixed(
        row, scope, ThumbprintColumn, cdb_hr::IHybridRowSerializer::get(value.GetThumbprint()));
      if (r != cdb_hr::Result::Success)
      {
        return r;
      }
    }

    if (!cdb_hr::IHybridRowSerializer::is_default(value.GetScore()))
    {
      cdb_hr::Result r = cdb_hr::LayoutLiteral::Float64.WriteFixed(
        row, scope, ScoreColumn, cdb_hr::IHybridRowSerializer::get(value.GetScore()));
      if (r != cdb_hr::Result::Success)
      {
        return r;
      }
    }

    return cdb_hr::Result::Success;
  }

  std::tuple<cdb_hr::Result, std::unique_ptr<SimilarMatch>> SimilarMatchHybridRowSerializer::Read(const cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, bool isRoot)
  {
    if (isRoot)
    {
      std::unique_ptr<SimilarMatch> value = std::make_unique<SimilarMatch>();
      cdb_hr::Result r = SimilarMatchHybridRowSerializer::Literal::Read(row, scope, *value);
      return {r, std::move(value)};
    }

    auto [r, childScope] = cdb_hr::LayoutLiteral::UDT.ReadScope(row, scope);
    if (r != cdb_hr::Result::Success)
    {
      return {r, std::unique_ptr<SimilarMatch>{}};
    }

    std::unique_ptr<SimilarMatch> value = std::make_unique<SimilarMatch>();
    r = SimilarMatchHybridRowSerializer::Literal::Read(row, childScope, *value);
    if (r != cdb_hr::Result::Success)
    {
      return {r, std::unique_ptr<SimilarMatch>{}};
    }

    scope.Skip(row, childScope);
    return {cdb_hr::Result::Success, std::move(value)};
  }

  cdb_hr::Result SimilarMatchHybridRowSerializer::Literal::Read(const cdb_hr::RowBuffer& row, cdb_hr::RowCursor& scope, SimilarMatch& value)
  {
    {
      auto [r, fieldValue] = cdb_hr::LayoutLiteral::Utf8.ReadFixed(row, scope, ThumbprintColumn);
      switch (r)
      {
      case cdb_hr::Result::NotFound:
        break;
      case cdb_hr::Result::Success:
        value.SetThumbprint(std::string(fieldValue));
        break;
      default:
        return r;
      }
    }

    {
      auto [r, fieldValue] = cdb_hr::LayoutLiteral::Float64.ReadFixed(row, scope, ScoreColumn);
      switch (r)
      {
      case cdb_hr::Result::NotFound:
        break;
      case cdb_hr::Result::Success:
        value.SetScore(fieldValue);
        break;
      default:
        return r;
      }
    }

    return cdb_hr::Result::Success;
  }
}
