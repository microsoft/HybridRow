// ------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All rights reserved.
// ------------------------------------------------------------

// ------------------------------------------------------------
// This file was generated by:
//   Microsoft.Azure.Cosmos.Serialization.HybridRowCLI: 1.0.0.0
//
// This file should not be modified directly.
// ------------------------------------------------------------

#pragma warning disable NamespaceMatchesFolderStructure // Namespace Declarations must match folder structure.
#pragma warning disable CA1707 // Identifiers should not contain underscores.
#pragma warning disable CA1034 // Do not nest types.
#pragma warning disable CA2104 // Do not declare readonly mutable reference types.
#pragma warning disable SA1129 // Do not use default value type constructor.
#pragma warning disable SA1309 // Field should not begin with an underscore.
#pragma warning disable SA1310 // Field names should not contain underscore.
#pragma warning disable SA1402 // File may only contain a single type.
#pragma warning disable SA1414 // Tuple types in signatures should have element names.
#pragma warning disable SA1514 // Element documentation header should be preceded by blank line.
#pragma warning disable SA1516 // Elements should be separated by blank line.
#pragma warning disable SA1649 // File name should match first type name.

// ReSharper disable CheckNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantEmptySwitchSection
// ReSharper disable JoinDeclarationAndInitializer
// ReSharper disable TooWideLocalVariableScope
// ReSharper disable ArrangeStaticMemberQualifier
// ReSharper disable RedundantJumpStatement
// ReSharper disable RedundantUsingDirective
namespace Microsoft.Azure.Cosmos.Serialization.HybridRow.Tests.Unit.CustomerSchema
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    using Microsoft.Azure.Cosmos.Core;
    using Microsoft.Azure.Cosmos.Core.Utf8;
    using Microsoft.Azure.Cosmos.Serialization.HybridRow;
    using Microsoft.Azure.Cosmos.Serialization.HybridRow.IO;
    using Microsoft.Azure.Cosmos.Serialization.HybridRow.Layouts;
    using Microsoft.Azure.Cosmos.Serialization.HybridRow.RecordIO;
    using Microsoft.Azure.Cosmos.Serialization.HybridRow.Schemas;

    internal static class CustomerSchemaHrSchema
    {
        public static readonly Namespace Namespace = CustomerSchemaHrSchema.CreateSchema();
        public static readonly LayoutResolver LayoutResolver = CustomerSchemaHrSchema.LoadSchema();

        private static Namespace CreateSchema()
        {
            return new Namespace
            {
                Name = "Microsoft.Azure.Cosmos.Serialization.HybridRow.Tests.Unit.CustomerSchema",
                Version = SchemaLanguageVersion.V2,
                Schemas = new List<Schema>
                {
                    //////////////////////////////////////////////////////////////////////////////
                    new Schema
                    {
                        Name = "PostalCode",
                        SchemaId = new SchemaId(1),
                        Properties = new List<Property>
                        {
                            new Property
                            {
                                Path = "zip",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Int32,
                                    Storage = StorageKind.Fixed,
                                },
                            },
                            new Property
                            {
                                Path = "plus4",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Int16,
                                },
                            },
                        },
                    },
                    //////////////////////////////////////////////////////////////////////////////
                    new Schema
                    {
                        Name = "Address",
                        SchemaId = new SchemaId(2),
                        Properties = new List<Property>
                        {
                            new Property
                            {
                                Path = "street",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                            },
                            new Property
                            {
                                Path = "city",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                            },
                            new Property
                            {
                                Path = "state",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Length = 2,
                                    Storage = StorageKind.Fixed,
                                },
                            },
                            new Property
                            {
                                Path = "postal_code",
                                PropertyType = new UdtPropertyType
                                {
                                    Name = "PostalCode",
                                    SchemaId = new SchemaId(0),
                                },
                                ApiName = "PostalCode",
                            },
                        },
                    },
                    //////////////////////////////////////////////////////////////////////////////
                    new Schema
                    {
                        Name = "Hotels",
                        SchemaId = new SchemaId(3),
                        PartitionKeys = new List<PartitionKey>
                        {
                            new PartitionKey
                            {
                                Path = "hotel_id",
                            },
                        },
                        Properties = new List<Property>
                        {
                            new Property
                            {
                                Path = "hotel_id",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                                ApiName = "Id",
                            },
                            new Property
                            {
                                Path = "name",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                            },
                            new Property
                            {
                                Path = "phone",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                            },
                            new Property
                            {
                                Path = "address",
                                PropertyType = new UdtPropertyType
                                {
                                    Name = "Address",
                                    SchemaId = new SchemaId(0),
                                    Immutable = true,
                                },
                            },
                        },
                    },
                    //////////////////////////////////////////////////////////////////////////////
                    new Schema
                    {
                        Name = "Available_Rooms_By_Hotel_Date",
                        SchemaId = new SchemaId(4),
                        PartitionKeys = new List<PartitionKey>
                        {
                            new PartitionKey
                            {
                                Path = "hotel_id",
                            },
                        },
                        PrimaryKeys = new List<PrimarySortKey>
                        {
                            new PrimarySortKey
                            {
                                Path = "date",
                            },
                            new PrimarySortKey
                            {
                                Path = "room_number",
                                Direction = SortDirection.Descending,
                            },
                        },
                        Properties = new List<Property>
                        {
                            new Property
                            {
                                Path = "hotel_id",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                                ApiName = "Id",
                            },
                            new Property
                            {
                                Path = "date",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.DateTime,
                                    Storage = StorageKind.Fixed,
                                },
                            },
                            new Property
                            {
                                Path = "room_number",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.UInt8,
                                    Storage = StorageKind.Fixed,
                                },
                                ApiName = "RoomNumber",
                            },
                            new Property
                            {
                                Path = "is_available",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Boolean,
                                },
                                ApiName = "IsAvailable",
                            },
                        },
                    },
                    //////////////////////////////////////////////////////////////////////////////
                    new Schema
                    {
                        Name = "Guests",
                        SchemaId = new SchemaId(5),
                        PartitionKeys = new List<PartitionKey>
                        {
                            new PartitionKey
                            {
                                Path = "guest_id",
                            },
                        },
                        PrimaryKeys = new List<PrimarySortKey>
                        {
                            new PrimarySortKey
                            {
                                Path = "first_name",
                            },
                            new PrimarySortKey
                            {
                                Path = "phone_numbers",
                                Direction = SortDirection.Descending,
                            },
                        },
                        Properties = new List<Property>
                        {
                            new Property
                            {
                                Path = "guest_id",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Guid,
                                    Storage = StorageKind.Fixed,
                                },
                                ApiName = "Id",
                            },
                            new Property
                            {
                                Path = "first_name",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                                ApiName = "FirstName",
                            },
                            new Property
                            {
                                Path = "last_name",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                                ApiName = "LastName",
                            },
                            new Property
                            {
                                Path = "title",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                            },
                            new Property
                            {
                                Path = "emails",
                                PropertyType = new ArrayPropertyType
                                {
                                    Items = new PrimitivePropertyType
                                    {
                                        Type = TypeKind.Utf8,
                                        Nullable = false,
                                    },
                                },
                            },
                            new Property
                            {
                                Path = "phone_numbers",
                                PropertyType = new ArrayPropertyType
                                {
                                    Items = new PrimitivePropertyType
                                    {
                                        Type = TypeKind.Utf8,
                                        Nullable = false,
                                    },
                                },
                                ApiName = "PhoneNumbers",
                            },
                            new Property
                            {
                                Path = "addresses",
                                PropertyType = new MapPropertyType
                                {
                                    Keys = new PrimitivePropertyType
                                    {
                                        Type = TypeKind.Utf8,
                                        Nullable = false,
                                    },
                                    Values = new UdtPropertyType
                                    {
                                        Name = "Address",
                                        SchemaId = new SchemaId(0),
                                        Nullable = false,
                                        Immutable = true,
                                    },
                                },
                            },
                            new Property
                            {
                                Path = "confirm_number",
                                PropertyType = new PrimitivePropertyType
                                {
                                    Type = TypeKind.Utf8,
                                    Storage = StorageKind.Variable,
                                },
                                ApiName = "ConfirmNumber",
                            },
                        },
                    },
                },
            };
        }

        private static LayoutResolver LoadSchema()
        {
            return new LayoutResolverNamespace(CustomerSchemaHrSchema.Namespace);
        }
    }

    public sealed class PostalCode
    {
        public int Zip { get; set; }
        public short Plus4 { get; set; }
    }

    public sealed class Address
    {
        public string Street { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public PostalCode PostalCode { get; set; }
    }

    public sealed class Hotels
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Phone { get; set; }
        public Address Address { get; set; }
    }

    public sealed class Available_Rooms_By_Hotel_Date
    {
        public string Id { get; set; }
        public DateTime Date { get; set; }
        public byte RoomNumber { get; set; }
        public bool IsAvailable { get; set; }
    }

    public sealed class Guests
    {
        public Guid Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Title { get; set; }
        public List<string> Emails { get; set; }
        public List<string> PhoneNumbers { get; set; }
        public Dictionary<string, Address> Addresses { get; set; }
        public string ConfirmNumber { get; set; }
    }

    public readonly struct PostalCodeHybridRowSerializer : IHybridRowSerializer<PostalCode>
    {
        public const int SchemaId = 1;
        public const int Size = 5;
        public IEqualityComparer<PostalCode> Comparer => PostalCodeComparer.Default;
        private static readonly Utf8String ZipName = Utf8String.TranscodeUtf16("zip");
        private static readonly Utf8String Plus4Name = Utf8String.TranscodeUtf16("plus4");

        private static readonly LayoutColumn ZipColumn;
        private static readonly LayoutColumn Plus4Column;

        private static readonly StringToken Plus4Token;

        static PostalCodeHybridRowSerializer()
        {
            Layout layout = CustomerSchemaHrSchema.LayoutResolver.Resolve(new SchemaId(SchemaId));

            bool found;
            found = layout.TryFind(ZipName, out ZipColumn);
            Contract.Invariant(found);
            found = layout.TryFind(Plus4Name, out Plus4Column);
            Contract.Invariant(found);

            found = layout.Tokenizer.TryFindToken(Plus4Column.Path, out Plus4Token);
            Contract.Invariant(found);
        }

        public Result Write(ref RowBuffer row, ref RowCursor scope, bool isRoot, TypeArgumentList typeArgs, PostalCode value)
        {
            if (isRoot)
            {
                return Write(ref row, ref scope, value);
            }

            Result r = LayoutType.UDT.WriteScope(ref row, ref scope, new SchemaId(SchemaId), out RowCursor childScope);
            if (r != Result.Success)
            {
                return r;
            }

            r = Write(ref row, ref childScope, value);
            if (r != Result.Success)
            {
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Write(ref RowBuffer row, ref RowCursor scope, PostalCode value)
        {
            Result r;
            if (value.Zip != default)
            {
                r = LayoutType.Int32.WriteFixed(ref row, ref scope, ZipColumn, value.Zip);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Plus4 != default)
            {
                scope.Find(ref row, Plus4Column.Path);
                r = LayoutType.Int16.WriteSparse(ref row, ref scope, value.Plus4);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            return Result.Success;
        }

        public Result Read(ref RowBuffer row, ref RowCursor scope, bool isRoot, out PostalCode value)
        {
            if (isRoot)
            {
                value = new PostalCode();
                return Read(ref row, ref scope, ref value);
            }

            Result r = LayoutType.UDT.ReadScope(ref row, ref scope, out RowCursor childScope);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            value = new PostalCode();
            r = Read(ref row, ref childScope, ref value);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Read(ref RowBuffer row, ref RowCursor scope, ref PostalCode value)
        {
            Result r;
            {
                r = LayoutType.Int32.ReadFixed(ref row, ref scope, ZipColumn, out int fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Zip = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            while (scope.MoveNext(ref row))
            {
                if (scope.Token == Plus4Token.Id)
                {
                    r = LayoutType.Int16.ReadSparse(ref row, ref scope, out short fieldValue);
                    if (r != Result.Success)
                    {
                        return r;
                    }

                    value.Plus4 = fieldValue;
                    continue;
                }
            }

            return Result.Success;
        }

        public sealed class PostalCodeComparer : EqualityComparer<PostalCode>
        {
            public static new readonly PostalCodeComparer Default = new PostalCodeComparer();

            public override bool Equals(PostalCode x, PostalCode y)
            {
                HybridRowSerializer.EqualityReferenceResult refCheck = HybridRowSerializer.EqualityReferenceCheck(x, y);
                if (refCheck != HybridRowSerializer.EqualityReferenceResult.Unknown)
                {
                    return refCheck == HybridRowSerializer.EqualityReferenceResult.Equal;
                }

                return
                    default(Int32HybridRowSerializer).Comparer.Equals(x.Zip, y.Zip) && 
                    default(Int16HybridRowSerializer).Comparer.Equals(x.Plus4, y.Plus4);
            }

            public override int GetHashCode(PostalCode obj)
            {
                return HashCode.Combine(
                    default(Int32HybridRowSerializer).Comparer.GetHashCode(obj.Zip),
                    default(Int16HybridRowSerializer).Comparer.GetHashCode(obj.Plus4));
            }
        }
    }

    public readonly struct AddressHybridRowSerializer : IHybridRowSerializer<Address>
    {
        public const int SchemaId = 2;
        public const int Size = 3;
        public IEqualityComparer<Address> Comparer => AddressComparer.Default;
        private static readonly Utf8String StreetName = Utf8String.TranscodeUtf16("street");
        private static readonly Utf8String CityName = Utf8String.TranscodeUtf16("city");
        private static readonly Utf8String StateName = Utf8String.TranscodeUtf16("state");
        private static readonly Utf8String PostalCodeName = Utf8String.TranscodeUtf16("postal_code");

        private static readonly LayoutColumn StreetColumn;
        private static readonly LayoutColumn CityColumn;
        private static readonly LayoutColumn StateColumn;
        private static readonly LayoutColumn PostalCodeColumn;

        private static readonly StringToken PostalCodeToken;

        static AddressHybridRowSerializer()
        {
            Layout layout = CustomerSchemaHrSchema.LayoutResolver.Resolve(new SchemaId(SchemaId));

            bool found;
            found = layout.TryFind(StreetName, out StreetColumn);
            Contract.Invariant(found);
            found = layout.TryFind(CityName, out CityColumn);
            Contract.Invariant(found);
            found = layout.TryFind(StateName, out StateColumn);
            Contract.Invariant(found);
            found = layout.TryFind(PostalCodeName, out PostalCodeColumn);
            Contract.Invariant(found);

            found = layout.Tokenizer.TryFindToken(PostalCodeColumn.Path, out PostalCodeToken);
            Contract.Invariant(found);
        }

        public Result Write(ref RowBuffer row, ref RowCursor scope, bool isRoot, TypeArgumentList typeArgs, Address value)
        {
            if (isRoot)
            {
                return Write(ref row, ref scope, value);
            }

            Result r = LayoutType.UDT.WriteScope(ref row, ref scope, new SchemaId(SchemaId), out RowCursor childScope);
            if (r != Result.Success)
            {
                return r;
            }

            r = Write(ref row, ref childScope, value);
            if (r != Result.Success)
            {
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Write(ref RowBuffer row, ref RowCursor scope, Address value)
        {
            Result r;
            if (value.State != default)
            {
                r = LayoutType.Utf8.WriteFixed(ref row, ref scope, StateColumn, value.State);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Street != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, StreetColumn, value.Street);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.City != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, CityColumn, value.City);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.PostalCode != default)
            {
                scope.Find(ref row, PostalCodeColumn.Path);
                r = default(PostalCodeHybridRowSerializer)
                    .Write(ref row, ref scope, false, PostalCodeColumn.TypeArgs, value.PostalCode);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            return Result.Success;
        }

        public Result Read(ref RowBuffer row, ref RowCursor scope, bool isRoot, out Address value)
        {
            if (isRoot)
            {
                value = new Address();
                return Read(ref row, ref scope, ref value);
            }

            Result r = LayoutType.UDT.ReadScope(ref row, ref scope, out RowCursor childScope);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            value = new Address();
            r = Read(ref row, ref childScope, ref value);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Read(ref RowBuffer row, ref RowCursor scope, ref Address value)
        {
            Result r;
            {
                r = LayoutType.Utf8.ReadFixed(ref row, ref scope, StateColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.State = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, StreetColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Street = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, CityColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.City = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            while (scope.MoveNext(ref row))
            {
                if (scope.Token == PostalCodeToken.Id)
                {
                    r = default(PostalCodeHybridRowSerializer)
                        .Read(ref row, ref scope, false, out PostalCode fieldValue);
                    if (r != Result.Success)
                    {
                        return r;
                    }

                    value.PostalCode = fieldValue;
                    continue;
                }
            }

            return Result.Success;
        }

        public sealed class AddressComparer : EqualityComparer<Address>
        {
            public static new readonly AddressComparer Default = new AddressComparer();

            public override bool Equals(Address x, Address y)
            {
                HybridRowSerializer.EqualityReferenceResult refCheck = HybridRowSerializer.EqualityReferenceCheck(x, y);
                if (refCheck != HybridRowSerializer.EqualityReferenceResult.Unknown)
                {
                    return refCheck == HybridRowSerializer.EqualityReferenceResult.Equal;
                }

                return
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.Street, y.Street) && 
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.City, y.City) && 
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.State, y.State) && 
                    default(PostalCodeHybridRowSerializer).Comparer.Equals(x.PostalCode, y.PostalCode);
            }

            public override int GetHashCode(Address obj)
            {
                return HashCode.Combine(
                    default(Utf8HybridRowSerializer).Comparer.GetHashCode(obj.Street),
                    default(Utf8HybridRowSerializer).Comparer.GetHashCode(obj.City),
                    default(Utf8HybridRowSerializer).Comparer.GetHashCode(obj.State),
                    default(PostalCodeHybridRowSerializer).Comparer.GetHashCode(obj.PostalCode));
            }
        }
    }

    public readonly struct HotelsHybridRowSerializer : IHybridRowSerializer<Hotels>
    {
        public const int SchemaId = 3;
        public const int Size = 1;
        public IEqualityComparer<Hotels> Comparer => HotelsComparer.Default;
        private static readonly Utf8String IdName = Utf8String.TranscodeUtf16("hotel_id");
        private static readonly Utf8String NameName = Utf8String.TranscodeUtf16("name");
        private static readonly Utf8String PhoneName = Utf8String.TranscodeUtf16("phone");
        private static readonly Utf8String AddressName = Utf8String.TranscodeUtf16("address");

        private static readonly LayoutColumn IdColumn;
        private static readonly LayoutColumn NameColumn;
        private static readonly LayoutColumn PhoneColumn;
        private static readonly LayoutColumn AddressColumn;

        private static readonly StringToken AddressToken;

        static HotelsHybridRowSerializer()
        {
            Layout layout = CustomerSchemaHrSchema.LayoutResolver.Resolve(new SchemaId(SchemaId));

            bool found;
            found = layout.TryFind(IdName, out IdColumn);
            Contract.Invariant(found);
            found = layout.TryFind(NameName, out NameColumn);
            Contract.Invariant(found);
            found = layout.TryFind(PhoneName, out PhoneColumn);
            Contract.Invariant(found);
            found = layout.TryFind(AddressName, out AddressColumn);
            Contract.Invariant(found);

            found = layout.Tokenizer.TryFindToken(AddressColumn.Path, out AddressToken);
            Contract.Invariant(found);
        }

        public Result Write(ref RowBuffer row, ref RowCursor scope, bool isRoot, TypeArgumentList typeArgs, Hotels value)
        {
            if (isRoot)
            {
                return Write(ref row, ref scope, value);
            }

            Result r = LayoutType.UDT.WriteScope(ref row, ref scope, new SchemaId(SchemaId), out RowCursor childScope);
            if (r != Result.Success)
            {
                return r;
            }

            r = Write(ref row, ref childScope, value);
            if (r != Result.Success)
            {
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Write(ref RowBuffer row, ref RowCursor scope, Hotels value)
        {
            Result r;
            if (value.Id != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, IdColumn, value.Id);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Name != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, NameColumn, value.Name);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Phone != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, PhoneColumn, value.Phone);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Address != default)
            {
                scope.Find(ref row, AddressColumn.Path);
                r = default(AddressHybridRowSerializer)
                    .Write(ref row, ref scope, false, AddressColumn.TypeArgs, value.Address);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            return Result.Success;
        }

        public Result Read(ref RowBuffer row, ref RowCursor scope, bool isRoot, out Hotels value)
        {
            if (isRoot)
            {
                value = new Hotels();
                return Read(ref row, ref scope, ref value);
            }

            Result r = LayoutType.UDT.ReadScope(ref row, ref scope, out RowCursor childScope);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            value = new Hotels();
            r = Read(ref row, ref childScope, ref value);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Read(ref RowBuffer row, ref RowCursor scope, ref Hotels value)
        {
            Result r;
            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, IdColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Id = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, NameColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Name = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, PhoneColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Phone = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            while (scope.MoveNext(ref row))
            {
                if (scope.Token == AddressToken.Id)
                {
                    r = default(AddressHybridRowSerializer)
                        .Read(ref row, ref scope, false, out Address fieldValue);
                    if (r != Result.Success)
                    {
                        return r;
                    }

                    value.Address = fieldValue;
                    continue;
                }
            }

            return Result.Success;
        }

        public sealed class HotelsComparer : EqualityComparer<Hotels>
        {
            public static new readonly HotelsComparer Default = new HotelsComparer();

            public override bool Equals(Hotels x, Hotels y)
            {
                HybridRowSerializer.EqualityReferenceResult refCheck = HybridRowSerializer.EqualityReferenceCheck(x, y);
                if (refCheck != HybridRowSerializer.EqualityReferenceResult.Unknown)
                {
                    return refCheck == HybridRowSerializer.EqualityReferenceResult.Equal;
                }

                return
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.Id, y.Id) && 
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.Name, y.Name) && 
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.Phone, y.Phone) && 
                    default(AddressHybridRowSerializer).Comparer.Equals(x.Address, y.Address);
            }

            public override int GetHashCode(Hotels obj)
            {
                return HashCode.Combine(
                    default(Utf8HybridRowSerializer).Comparer.GetHashCode(obj.Id),
                    default(Utf8HybridRowSerializer).Comparer.GetHashCode(obj.Name),
                    default(Utf8HybridRowSerializer).Comparer.GetHashCode(obj.Phone),
                    default(AddressHybridRowSerializer).Comparer.GetHashCode(obj.Address));
            }
        }
    }

    public readonly struct Available_Rooms_By_Hotel_DateHybridRowSerializer : IHybridRowSerializer<Available_Rooms_By_Hotel_Date>
    {
        public const int SchemaId = 4;
        public const int Size = 10;
        public IEqualityComparer<Available_Rooms_By_Hotel_Date> Comparer => Available_Rooms_By_Hotel_DateComparer.Default;
        private static readonly Utf8String IdName = Utf8String.TranscodeUtf16("hotel_id");
        private static readonly Utf8String DateName = Utf8String.TranscodeUtf16("date");
        private static readonly Utf8String RoomNumberName = Utf8String.TranscodeUtf16("room_number");
        private static readonly Utf8String IsAvailableName = Utf8String.TranscodeUtf16("is_available");

        private static readonly LayoutColumn IdColumn;
        private static readonly LayoutColumn DateColumn;
        private static readonly LayoutColumn RoomNumberColumn;
        private static readonly LayoutColumn IsAvailableColumn;

        private static readonly StringToken IsAvailableToken;

        static Available_Rooms_By_Hotel_DateHybridRowSerializer()
        {
            Layout layout = CustomerSchemaHrSchema.LayoutResolver.Resolve(new SchemaId(SchemaId));

            bool found;
            found = layout.TryFind(IdName, out IdColumn);
            Contract.Invariant(found);
            found = layout.TryFind(DateName, out DateColumn);
            Contract.Invariant(found);
            found = layout.TryFind(RoomNumberName, out RoomNumberColumn);
            Contract.Invariant(found);
            found = layout.TryFind(IsAvailableName, out IsAvailableColumn);
            Contract.Invariant(found);

            found = layout.Tokenizer.TryFindToken(IsAvailableColumn.Path, out IsAvailableToken);
            Contract.Invariant(found);
        }

        public Result Write(ref RowBuffer row, ref RowCursor scope, bool isRoot, TypeArgumentList typeArgs, Available_Rooms_By_Hotel_Date value)
        {
            if (isRoot)
            {
                return Write(ref row, ref scope, value);
            }

            Result r = LayoutType.UDT.WriteScope(ref row, ref scope, new SchemaId(SchemaId), out RowCursor childScope);
            if (r != Result.Success)
            {
                return r;
            }

            r = Write(ref row, ref childScope, value);
            if (r != Result.Success)
            {
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Write(ref RowBuffer row, ref RowCursor scope, Available_Rooms_By_Hotel_Date value)
        {
            Result r;
            if (value.Date != default)
            {
                r = LayoutType.DateTime.WriteFixed(ref row, ref scope, DateColumn, value.Date);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.RoomNumber != default)
            {
                r = LayoutType.UInt8.WriteFixed(ref row, ref scope, RoomNumberColumn, value.RoomNumber);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Id != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, IdColumn, value.Id);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.IsAvailable != default)
            {
                scope.Find(ref row, IsAvailableColumn.Path);
                r = LayoutType.Boolean.WriteSparse(ref row, ref scope, value.IsAvailable);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            return Result.Success;
        }

        public Result Read(ref RowBuffer row, ref RowCursor scope, bool isRoot, out Available_Rooms_By_Hotel_Date value)
        {
            if (isRoot)
            {
                value = new Available_Rooms_By_Hotel_Date();
                return Read(ref row, ref scope, ref value);
            }

            Result r = LayoutType.UDT.ReadScope(ref row, ref scope, out RowCursor childScope);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            value = new Available_Rooms_By_Hotel_Date();
            r = Read(ref row, ref childScope, ref value);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Read(ref RowBuffer row, ref RowCursor scope, ref Available_Rooms_By_Hotel_Date value)
        {
            Result r;
            {
                r = LayoutType.DateTime.ReadFixed(ref row, ref scope, DateColumn, out DateTime fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Date = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.UInt8.ReadFixed(ref row, ref scope, RoomNumberColumn, out byte fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.RoomNumber = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, IdColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Id = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            while (scope.MoveNext(ref row))
            {
                if (scope.Token == IsAvailableToken.Id)
                {
                    r = LayoutType.Boolean.ReadSparse(ref row, ref scope, out bool fieldValue);
                    if (r != Result.Success)
                    {
                        return r;
                    }

                    value.IsAvailable = fieldValue;
                    continue;
                }
            }

            return Result.Success;
        }

        public sealed class Available_Rooms_By_Hotel_DateComparer : EqualityComparer<Available_Rooms_By_Hotel_Date>
        {
            public static new readonly Available_Rooms_By_Hotel_DateComparer Default = new Available_Rooms_By_Hotel_DateComparer();

            public override bool Equals(Available_Rooms_By_Hotel_Date x, Available_Rooms_By_Hotel_Date y)
            {
                HybridRowSerializer.EqualityReferenceResult refCheck = HybridRowSerializer.EqualityReferenceCheck(x, y);
                if (refCheck != HybridRowSerializer.EqualityReferenceResult.Unknown)
                {
                    return refCheck == HybridRowSerializer.EqualityReferenceResult.Equal;
                }

                return
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.Id, y.Id) && 
                    default(DateTimeHybridRowSerializer).Comparer.Equals(x.Date, y.Date) && 
                    default(UInt8HybridRowSerializer).Comparer.Equals(x.RoomNumber, y.RoomNumber) && 
                    default(BooleanHybridRowSerializer).Comparer.Equals(x.IsAvailable, y.IsAvailable);
            }

            public override int GetHashCode(Available_Rooms_By_Hotel_Date obj)
            {
                return HashCode.Combine(
                    default(Utf8HybridRowSerializer).Comparer.GetHashCode(obj.Id),
                    default(DateTimeHybridRowSerializer).Comparer.GetHashCode(obj.Date),
                    default(UInt8HybridRowSerializer).Comparer.GetHashCode(obj.RoomNumber),
                    default(BooleanHybridRowSerializer).Comparer.GetHashCode(obj.IsAvailable));
            }
        }
    }

    public readonly struct GuestsHybridRowSerializer : IHybridRowSerializer<Guests>
    {
        public const int SchemaId = 5;
        public const int Size = 17;
        public IEqualityComparer<Guests> Comparer => GuestsComparer.Default;
        private static readonly Utf8String IdName = Utf8String.TranscodeUtf16("guest_id");
        private static readonly Utf8String FirstNameName = Utf8String.TranscodeUtf16("first_name");
        private static readonly Utf8String LastNameName = Utf8String.TranscodeUtf16("last_name");
        private static readonly Utf8String TitleName = Utf8String.TranscodeUtf16("title");
        private static readonly Utf8String EmailsName = Utf8String.TranscodeUtf16("emails");
        private static readonly Utf8String PhoneNumbersName = Utf8String.TranscodeUtf16("phone_numbers");
        private static readonly Utf8String AddressesName = Utf8String.TranscodeUtf16("addresses");
        private static readonly Utf8String ConfirmNumberName = Utf8String.TranscodeUtf16("confirm_number");

        private static readonly LayoutColumn IdColumn;
        private static readonly LayoutColumn FirstNameColumn;
        private static readonly LayoutColumn LastNameColumn;
        private static readonly LayoutColumn TitleColumn;
        private static readonly LayoutColumn EmailsColumn;
        private static readonly LayoutColumn PhoneNumbersColumn;
        private static readonly LayoutColumn AddressesColumn;
        private static readonly LayoutColumn ConfirmNumberColumn;

        private static readonly StringToken EmailsToken;
        private static readonly StringToken PhoneNumbersToken;
        private static readonly StringToken AddressesToken;

        static GuestsHybridRowSerializer()
        {
            Layout layout = CustomerSchemaHrSchema.LayoutResolver.Resolve(new SchemaId(SchemaId));

            bool found;
            found = layout.TryFind(IdName, out IdColumn);
            Contract.Invariant(found);
            found = layout.TryFind(FirstNameName, out FirstNameColumn);
            Contract.Invariant(found);
            found = layout.TryFind(LastNameName, out LastNameColumn);
            Contract.Invariant(found);
            found = layout.TryFind(TitleName, out TitleColumn);
            Contract.Invariant(found);
            found = layout.TryFind(EmailsName, out EmailsColumn);
            Contract.Invariant(found);
            found = layout.TryFind(PhoneNumbersName, out PhoneNumbersColumn);
            Contract.Invariant(found);
            found = layout.TryFind(AddressesName, out AddressesColumn);
            Contract.Invariant(found);
            found = layout.TryFind(ConfirmNumberName, out ConfirmNumberColumn);
            Contract.Invariant(found);

            found = layout.Tokenizer.TryFindToken(EmailsColumn.Path, out EmailsToken);
            Contract.Invariant(found);
            found = layout.Tokenizer.TryFindToken(PhoneNumbersColumn.Path, out PhoneNumbersToken);
            Contract.Invariant(found);
            found = layout.Tokenizer.TryFindToken(AddressesColumn.Path, out AddressesToken);
            Contract.Invariant(found);
        }

        public Result Write(ref RowBuffer row, ref RowCursor scope, bool isRoot, TypeArgumentList typeArgs, Guests value)
        {
            if (isRoot)
            {
                return Write(ref row, ref scope, value);
            }

            Result r = LayoutType.UDT.WriteScope(ref row, ref scope, new SchemaId(SchemaId), out RowCursor childScope);
            if (r != Result.Success)
            {
                return r;
            }

            r = Write(ref row, ref childScope, value);
            if (r != Result.Success)
            {
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Write(ref RowBuffer row, ref RowCursor scope, Guests value)
        {
            Result r;
            if (value.Id != default)
            {
                r = LayoutType.Guid.WriteFixed(ref row, ref scope, IdColumn, value.Id);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.FirstName != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, FirstNameColumn, value.FirstName);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.LastName != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, LastNameColumn, value.LastName);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Title != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, TitleColumn, value.Title);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.ConfirmNumber != default)
            {
                r = LayoutType.Utf8.WriteVariable(ref row, ref scope, ConfirmNumberColumn, value.ConfirmNumber);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Emails != default)
            {
                scope.Find(ref row, EmailsColumn.Path);
                r = default(TypedArrayHybridRowSerializer<string, Utf8HybridRowSerializer>).Write(
                    ref row,
                    ref scope,
                    false,
                    EmailsColumn.TypeArgs,
                    value.Emails);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.PhoneNumbers != default)
            {
                scope.Find(ref row, PhoneNumbersColumn.Path);
                r = default(TypedArrayHybridRowSerializer<string, Utf8HybridRowSerializer>).Write(
                    ref row,
                    ref scope,
                    false,
                    PhoneNumbersColumn.TypeArgs,
                    value.PhoneNumbers);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            if (value.Addresses != default)
            {
                scope.Find(ref row, AddressesColumn.Path);
                r = default(TypedMapHybridRowSerializer<
                    string, Utf8HybridRowSerializer,
                    Address, AddressHybridRowSerializer
                    >).Write(
                    ref row,
                    ref scope,
                    false,
                    AddressesColumn.TypeArgs,
                    value.Addresses);
                if (r != Result.Success)
                {
                    return r;
                }
            }

            return Result.Success;
        }

        public Result Read(ref RowBuffer row, ref RowCursor scope, bool isRoot, out Guests value)
        {
            if (isRoot)
            {
                value = new Guests();
                return Read(ref row, ref scope, ref value);
            }

            Result r = LayoutType.UDT.ReadScope(ref row, ref scope, out RowCursor childScope);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            value = new Guests();
            r = Read(ref row, ref childScope, ref value);
            if (r != Result.Success)
            {
                value = default;
                return r;
            }

            scope.Skip(ref row, ref childScope);
            return Result.Success;
        }

        private static Result Read(ref RowBuffer row, ref RowCursor scope, ref Guests value)
        {
            Result r;
            {
                r = LayoutType.Guid.ReadFixed(ref row, ref scope, IdColumn, out Guid fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Id = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, FirstNameColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.FirstName = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, LastNameColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.LastName = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, TitleColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.Title = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            {
                r = LayoutType.Utf8.ReadVariable(ref row, ref scope, ConfirmNumberColumn, out string fieldValue);
                switch (r)
                {
                    case Result.NotFound:
                        break;
                    case Result.Success:
                        value.ConfirmNumber = fieldValue;
                        break;
                    default:
                        return r;
                }
            }

            while (scope.MoveNext(ref row))
            {
                if (scope.Token == EmailsToken.Id)
                {
                    r = default(TypedArrayHybridRowSerializer<string, Utf8HybridRowSerializer>)
                        .Read(ref row, ref scope, false, out List<string> fieldValue);
                    if (r != Result.Success)
                    {
                        return r;
                    }

                    value.Emails = fieldValue;
                    continue;
                }

                if (scope.Token == PhoneNumbersToken.Id)
                {
                    r = default(TypedArrayHybridRowSerializer<string, Utf8HybridRowSerializer>)
                        .Read(ref row, ref scope, false, out List<string> fieldValue);
                    if (r != Result.Success)
                    {
                        return r;
                    }

                    value.PhoneNumbers = fieldValue;
                    continue;
                }

                if (scope.Token == AddressesToken.Id)
                {
                    r = default(TypedMapHybridRowSerializer<
                        string, Utf8HybridRowSerializer,
                        Address, AddressHybridRowSerializer
                        >).Read(ref row, ref scope, false, out Dictionary<string, Address> fieldValue);
                    if (r != Result.Success)
                    {
                        return r;
                    }

                    value.Addresses = fieldValue;
                    continue;
                }
            }

            return Result.Success;
        }

        public sealed class GuestsComparer : EqualityComparer<Guests>
        {
            public static new readonly GuestsComparer Default = new GuestsComparer();

            public override bool Equals(Guests x, Guests y)
            {
                HybridRowSerializer.EqualityReferenceResult refCheck = HybridRowSerializer.EqualityReferenceCheck(x, y);
                if (refCheck != HybridRowSerializer.EqualityReferenceResult.Unknown)
                {
                    return refCheck == HybridRowSerializer.EqualityReferenceResult.Equal;
                }

                return
                    default(GuidHybridRowSerializer).Comparer.Equals(x.Id, y.Id) && 
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.FirstName, y.FirstName) && 
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.LastName, y.LastName) && 
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.Title, y.Title) && 
                    default(TypedArrayHybridRowSerializer<string, Utf8HybridRowSerializer>).Comparer.Equals(x.Emails, y.Emails) && 
                    default(TypedArrayHybridRowSerializer<string, Utf8HybridRowSerializer>).Comparer.Equals(x.PhoneNumbers, y.PhoneNumbers) && 
                    default(TypedMapHybridRowSerializer<string, Utf8HybridRowSerializer, Address, AddressHybridRowSerializer>).Comparer.Equals(x.Addresses, y.Addresses) && 
                    default(Utf8HybridRowSerializer).Comparer.Equals(x.ConfirmNumber, y.ConfirmNumber);
            }

            public override int GetHashCode(Guests obj)
            {
                HashCode hash = default;
                hash.Add(obj.Id, default(GuidHybridRowSerializer).Comparer);
                hash.Add(obj.FirstName, default(Utf8HybridRowSerializer).Comparer);
                hash.Add(obj.LastName, default(Utf8HybridRowSerializer).Comparer);
                hash.Add(obj.Title, default(Utf8HybridRowSerializer).Comparer);
                hash.Add(obj.Emails, default(TypedArrayHybridRowSerializer<string, Utf8HybridRowSerializer>).Comparer);
                hash.Add(obj.PhoneNumbers, default(TypedArrayHybridRowSerializer<string, Utf8HybridRowSerializer>).Comparer);
                hash.Add(obj.Addresses, default(TypedMapHybridRowSerializer<string, Utf8HybridRowSerializer, Address, AddressHybridRowSerializer>).Comparer);
                hash.Add(obj.ConfirmNumber, default(Utf8HybridRowSerializer).Comparer);
                return hash.ToHashCode();
            }
        }
    }
}
